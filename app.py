import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pandas_datareader.data as web
import datetime as dt
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from keras.models import Sequential, model_from_json
from keras.layers import Dense, Dropout, LSTM
import yfinance as yf
import warnings
import os
import time
ocultar = """<style>
                #MainMenu {visibility: hidden;}
                footer {visibility: hidden;}
                </style>"""
st.set_page_config(page_title="Ações", page_icon=None,
                   layout="centered", initial_sidebar_state="auto", menu_items=None)
st.markdown(ocultar, unsafe_allow_html=True)
st.title('Previsão do preço de ações')
selecionar_acao = ('^BVSP', 'MGLU3.SA', 
'IRBR3.SA', 
'OIBR3.SA',
'PETR4.SA',
'B3SA3.SA',
'RDOR3.SA',
'VIIA3.SA',
'VALE3.SA',
'PDGR3.SA',
'ITUB4.SA',
'AMER3.SA',
'BBDC4.SA',
'CASH3.SA',
'HAPV3.SA',
'CSNA3.SA',
'LREN3.SA',
'CIEL3.SA',
'BRFS3.SA',
'MRFG3.SA',
'USIM5.SA',
'ITSA4.SA',
'COGN3.SA',
'GGBR4.SA',
'RAIZ4.SA',
'CVCB3.SA',
'BRML3.SA',
'VIVR3.SA',
'NTCO3.SA',
'AZUL4.SA',
'BBAS3.SA',
'POMO4.SA',
'CPLE6.SA',
'CSAN3.SA',
'PRIO3.SA',
'ABEV3.SA',
'KRSA3.SA',
'PETZ3.SA',
'LWSA3.SA',
'SOMA3.SA',
'PETR3.SA',
'MRVE3.SA',
'VBBR3.SA',
'HBSA3.SA',
'ENEV3.SA',
'RAIL3.SA',
'CMIN3.SA',
'EQTL3.SA',
'JBSS3.SA',
'GOAU4.SA',
'DMMO3.SA',
'SUZB3.SA',
'CCRO3.SA',
'AERI3.SA',
'GOLL4.SA',
'RENT3.SA',
'DXCO3.SA',
'AMAR3.SA',
'RRRP3.SA',
'ASAI3.SA',
'WEGE3.SA',
'UGPA3.SA',
'BEEF3.SA',
'TOTS3.SA',
'YDUQ3.SA',
'TEND3.SA',
'CEAB3.SA',
'MULT3.SA',
'GUAR3.SA',
'SIMH3.SA',
'ONCO3.SA',
'TRPL4.SA',
'AZEV4.SA',
'ELET3.SA',
'CMIG4.SA',
'BBDC3.SA',
'KLBN4.SA',
'ALSO3.SA',
'EMBR3.SA',
'ECOR3.SA',
'MOVI3.SA',
'BBSE3.SA',
'ESPA3.SA',
'GMAT3.SA',
'STBP3.SA',
'VAMO3.SA',
'TIMS3.SA',
'MODL3.SA',
'QUAL3.SA',
'MEAL3.SA',
'POSI3.SA',
'RAPT4.SA',
'CYRE3.SA',
'ALPA4.SA',
'GFSA3.SA',
'LJQQ3.SA',
'FLRY3.SA',
'BRPR3.SA',
'EZTC3.SA',
'DIRR3.SA',
'MYPK3.SA',
'INEP3.SA',
'LIGT3.SA',
'BRSR6.SA',
'PCAR3.SA',
'ANIM3.SA', 
'RECV3.SA',
'BRAP4.SA',
'RADL3.SA',
'HYPE3.SA',
'LUPA3.SA',
'BPAN4.SA',
'CBAV3.SA',
'MLAS3.SA',
'GGPS3.SA',
'ENBR3.SA',
'MDIA3.SA',
'SAPR4.SA',
'CRFB3.SA',
'SEQL3.SA',
'SBSP3.SA',
'RCSL4.SA',
'BRKM5.SA',
'WIZS3.SA',
'OIBR4.SA',
'JHSF3.SA',
'AMBP3.SA',
'SMTO3.SA',
'GRND3.SA',
'PSSA3.SA',
'TASA4.SA',
'BMGB4.SA',
'RANI3.SA',
'ODPV3.SA',
'CXSE3.SA',
'SLCE3.SA',
'SHOW3.SA',
'PGMN3.SA',
'ENAT3.SA',
'AESB3.SA',
'VIVT3.SA',
'OPCT3.SA',
'EGIE3.SA',
'CURY3.SA',
'VIVA3.SA',
'SEER3.SA',
'TTEN3.SA',
'EVEN3.SA',
'ELET6.SA',
'HBOR3.SA',
'ARZZ3.SA',
'SBFG3.SA',
'TRIS3.SA',
'DASA3.SA',
'CAML3.SA',
'CPFE3.SA',
'JSLG3.SA',
'NEOE3.SA',
'CSMG3.SA',
'BOAS3.SA',
'MILS3.SA',
'KEPL3.SA',
'PORT3.SA',
'AZEV3.SA',
'AALR3.SA',
'PTBL3.SA',
'KLBN3.SA',
'ENJU3.SA',
'PARD3.SA',
'TUPY3.SA',
'BMOB3.SA',
'VITT3.SA',
'POMO3.SA',
'INTB3.SA', 
'CPLE3.SA',
'TPIS3.SA',
'TRAD3.SA',
'CMIG3.SA',
'MBLY3.SA',
'INEP4.SA',
'SAPR3.SA',
'ABCB4.SA',
'NGRD3.SA',
'PNVL3.SA',
'USIM3.SA',
'MTRE3.SA',
'ETER3.SA',
'TECN3.SA',
'ROMI3.SA',
'TAEE4.SA',
'SYNE3.SA',
'LOGG3.SA',
'AGRO3.SA',
'MATD3.SA',
'AGXY3.SA',
'JALL3.SA',
'SQIA3.SA',
'SMFT3.SA',
'CLSA3.SA',
'FHER3.SA',
'VULC3.SA',
'RCSL3.SA',
'LEVE3.SA',
'EQPA3.SA',
'IFCM3.SA',
'ITUB3.SA',
'TGMA3.SA',
'SHUL4.SA',
'MELK3.SA',
'ARML3.SA',
'EUCA4.SA',
'LAVV3.SA',
'FRAS3.SA',
'VLID3.SA',
'TAEE3.SA',
'LOGN3.SA',
'FIQE3.SA',
'BLAU3.SA',
'SANB4.SA',
'ORVR3.SA',
'CSED3.SA',
'PFRM3.SA',
'WEST3.SA',
'PLPL3.SA',
'ELMD3.SA',
'FESA4.SA',
'UNIP6.SA',
'SANB3.SA',
'IGTI3.SA',
'LVTC3.SA',
'ALPK3.SA',
'NEXP3.SA',
'DESK3.SA',
'TFCO4.SA',
'ITSA3.SA',
'VVEO3.SA',
'LPSB3.SA',
'DEXP3.SA',
'NINJ3.SA',
'PRNR3.SA',
'BRIT3.SA',
'PINE4.SA',
'ALLD3.SA',
'TASA3.SA',
'MDNE3.SA',
'SOJA3.SA', 
'RSID3.SA',
'JFEN3.SA',
'BRAP3.SA',
'TCSA3.SA',
'PMAM3.SA',
'PDTC3.SA',
'RNEW4.SA',
'BEES3.SA',
'GGBR3.SA',
'SGPS3.SA',
'HBRE3.SA',
'DOTZ3.SA',
'ALUP3.SA',
'GOAU3.SA',
'RNEW3.SA',
'SCAR3.SA',
'BOBR4.SA',
'ENGI4.SA',
'HAGA3.SA',
'ALUP4.SA',
'APER3.SA',
'TELB4.SA',
'RDNI3.SA',
'CAMB3.SA',
'LAND3.SA',
'BIOM3.SA',
'BRKM3.SA',
'CGRA4.SA',
'CTSA4.SA',
'DMVF3.SA',
'HAGA4.SA',
'CTSA3.SA',
'COCE5.SA',
'EMAE4.SA',
'RAPT3.SA',
'UCAS3.SA',
'TRPL3.SA',
'BRSR3.SA',
'UNIP3.SA',
'BEES4.SA',
'GETT3.SA',
'BMEB4.SA',
'GETT4.SA',
'CEBR6.SA',
'MGEL4.SA',
'ATMP3.SA',
'CLSC4.SA',
'EUCA3.SA',
'RSUL4.SA',
'CTNM4.SA',
'BPAC5.SA',
'ENGI3.SA',
'BAZA3.SA',
'EALT4.SA',
'ALPA3.SA',
'OSXB3.SA',
'CRPG5.SA',
'RPMG3.SA',
'CEEB3.SA',
'WLMM4.SA',
'TELB3.SA',
'CEBR3.SA',
'OFSA3.SA',
'SLED4.SA', 
'PTNT3.SA',
'BAHI3.SA',
'EQMA3B.SA',
'CEBR5.SA',
'CRIV4.SA',
'NORD3.SA',
'PTNT4.SA',
'ATOM3.SA',
'BGIP4.SA',
'TEKA4.SA',
'MWET4.SA',
'DOHL4.SA',
'BRIV4.SA',
'WHRL4.SA',
'IGBR3.SA',
'CRIV3.SA',
'SNSY5.SA',
'MNDL3.SA',
'EPAR3.SA',
'CEED3.SA',
'MNPR3.SA',
'BDLL4.SA',
'REDE3.SA',
'RPAD6.SA',
'BMEB3.SA',
'AVLL3.SA',
'SNSY3.SA',
'WHRL3.SA',
'AFLT3.SA',
'CEDO4.SA',
'BPAC3.SA',
'GEPA4.SA',
'EKTR4.SA',
'FESA3.SA',
'ENMT3.SA',
'MTSA4.SA',
'ENMT4.SA',
'MOAR3.SA',
'LUXM4.SA',
'DEXP4.SA',
'CGAS3.SA',
'HETA4.SA',
'GSHP3.SA',
'CSRN3.SA',
'UNIP5.SA',
'CGAS5.SA',
'BMIN4.SA',
'JOPA4.SA',
'SLED3.SA',
'BRGE12.SA',
'CRPG6.SA',
'CGRA3.SA',
'BMKS3.SA',
'CRDE3.SA',
'SULA4.SA',
'SULA3.SA',
'BRGE3.SA',
'HOOT4.SA',
'BSLI4.SA',
'RPAD3.SA',
'MSPA4.SA',
'BRIV3.SA',
'FRTA3.SA',
'BRKM6.SA',
'PLAS3.SA',
'LIPR3.SA',
'CLSC3.SA',
'MERC4.SA',
'BALM4.SA',
'EQPA5.SA',
'JOPA3.SA', 
'BSLI3.SA',
'PEAB4.SA',
'GEPA3.SA',
'CTNM3.SA',
'BRGE8.SA',
'EKTR3.SA',
'CEEB5.SA',
'WLMM3.SA',
'EALT3.SA',
'AHEB3.SA',
'DTCY3.SA',
'CTKA4.SA',
'BRSR5.SA',
'PEAB3.SA',
'BNBR3.SA',
'MRSA5B.SA',
'GPAR3.SA',
'CSRN5.SA',
'AHEB6.SA',
'CALI3.SA',
'CTKA3.SA',
'EQPA7.SA',
'CSAB4.SA',
'BRGE11.SA',
'CPLE5.SA',
'BALM3.SA',
'BDLL3.SA',
'CEED4.SA',
'HBTS5.SA',
'CBEE3.SA',
'BGIP3.SA',
'RPAD5.SA',
'BRGE6.SA',
'CEDO3.SA',
'BAUH4.SA',
'TKNO4.SA',
'USIM6.SA',
'ESTR4.SA',
'MRSA6B.SA',
'BRGE5.SA',
'SOND5.SA',
'CRPG3.SA',
'MRSA3B.SA',
'FRIO3.SA',
'SOND6.SA',
'PATI3.SA',
'MWET3.SA',
'CSRN6.SA',
'BMIN3.SA',
'DOHL3.SA',
'CSAB3.SA',
'PATI4.SA',
'CEPE5.SA',
'MERC3.SA',
'TCNO4.SA',
'TCNO3.SA',
'CEPE6.SA',
'BKBR3.SA',
'MTSA3.SA', 
'MTIG4.SA',
'MAPT4.SA', 
'COCE3.SA',
'BLUT4.SA',
'BLUT3.SA',
'MODL4.SA',
'CARD3.SA',
'MAPT3.SA',
'FIGE3.SA',
'FNCN3.SA',
'CASN3.SA',
'TEKA3.SA',
'HETA3.SA',
'LCAM3.SA',
'BIDI4.SA',
'BIDI3.SA',
'EEEL4.SA',
'EEEL3.SA',
'BBRK3.SA',
'SOND3.SA',
'CEGR3.SA',
'CESP6.SA',
'CESP3.SA', 
'CESP5.SA',
'ECPR4.SA',
'MOSI3.SA',
'MSPA3.SA',
'POWE3.SA',
'EQPA6.SA',
'ECPR3.SA',
'GNDI3.SA',
'LAME4.SA',
'LAME3.SA',
'AHEB5.SA',
'ELET5.SA',
'OMGE3.SA',
'IGTA3.SA',
'JPSA3.SA',
'BRDT3.SA',
'JBDU4.SA',
'JBDU3.SA',
'HGTX3.SA',
'CCPR3.SA',
'DTEX3.SA',
'VVAR3.SA',
'PNVL4.SA',
'TESA3.SA',
'BTOW3.SA',
'ESTR3.SA',
'LINX3.SA',
'BTTL3.SA',
'GPCP3.SA',
'GPCP4.SA',
'SMLS3.SA',
'MMXM3.SA',
'BSEV3.SA',
'CNTO3.SA',
'TIET4.SA',
'TIET3.SA',
'CORR4.SA',
'ODER4.SA',
'CEPE3.SA',
'CALI4.SA',
'SNSY6.SA',
'CASN4.SA',
'EMAE3.SA',
'BRGE7.SA',
'BPAR3.SA',
'APTI4.SA',
'VSPT3.SA',
'MTIG3.SA',
'FIGE4.SA',
'LUXM3.SA',
'TKNO3.SA',
'COCE6.SA',
'MGEL3.SA',
'CTSA8.SA',
'MMAQ4.SA',
'NU',
'RBLX',
'META',
'TSLA',
'AAVE-USD',
'MANA-USD',
'CAKE-USD',
'GRT-USD',
'IOTA-USD',
'KLAY-USD',
'DASH-USD',
'APT-USD',
'NEO-USD',
'RUNE-USD',
'XEC-USD',
'MINA-USD',
'SRM-USD',
'UNI-USD',
'ATOM-USD',
'XMR-USD',
'APE-USD',
'ALGO-USD',
'VET-USD',
'ICP-USD',
'NEAR-USD',
'FIL-USD',
'HBAR-USD',
'LUNC-USD',
'SHIB-USD',
'FTM-USD',
'CENNZ-USD',
'IGNIS-USD',
'ENJ-USD',
'LINK-USD',
'HNT-USD',
'MBOX-USD',
'DOGE-USD',
'USDC-USD',
'XRP-USD',
'DOT-USD',
'AVAX-USD',
'AR-USD',
'ETH-USD',
'USDT-USD', 
'BTC-USD',
'BNB-USD', 
'ADA-USD', 
'SOL-USD', 
'LINK-USD', 
'LTC-USD',
'UNI-USD', 
'XTZ-USD',)
acao = st.selectbox('Selecione a ação que você quer ver a previsão ', selecionar_acao)
warnings.filterwarnings('ignore')
yf.pdr_override()
inicio = dt.datetime(2010, 1, 1)
fim = dt.datetime(2023, 1, 1)
dados = web.DataReader(acao, inicio, fim)
scaler = MinMaxScaler(feature_range=(0, 1))
scaler1=StandardScaler()
scaler_dados = scaler.fit_transform(dados['Close'].values.reshape(-1, 1))
dias = 60
x = []
y = []
for a in range(dias, len(scaler_dados)):
    x.append(scaler_dados[a-dias:a, 0])
    y.append(scaler_dados[a, 0])
x, y = np.array(x), np.array(y)
x = np.reshape(x, (x.shape[0], x.shape[1], 1))
if os.path.isfile('modelo.h5'):
    arquivo_json = open('modelo.json', 'r')
    modelocarregado = arquivo_json.read()
    arquivo_json.close()
    modelo = model_from_json(modelocarregado)
    modelo.load_weights("modelo.h5")
    new_model = Sequential()
    new_model.add(LSTM(units=50, return_sequences=True, input_shape=(x.shape[1], 1)))
    new_model.add(Dropout(0, 2))
    new_model.add(LSTM(units=50, return_sequences=True))
    new_model.add(Dropout(0, 2))
    new_model.add(LSTM(units=50))
    new_model.add(Dropout(0, 2))
    new_model.add(Dense(units=1))
    new_model.compile(optimizer='adam', loss='mean_squared_error')
    modelo_json = new_model.to_json()
    new_model.set_weights(modelo.get_weights())
    history = new_model.fit(x, y, epochs = 25)
    with open("modelo.json", "w") as arquivo_json:
        arquivo_json.write(modelo_json)
    new_model.save_weights("modelo.h5")
else:
    modelo = Sequential()
    modelo.add(LSTM(units=50, return_sequences=True, input_shape=(x.shape[1], 1)))
    modelo.add(Dropout(0, 2))
    modelo.add(LSTM(units=50, return_sequences=True))
    modelo.add(Dropout(0, 2))
    modelo.add(LSTM(units=50))
    modelo.add(Dropout(0, 2))
    modelo.add(Dense(units=1))
    modelo.compile(optimizer='adam', loss='mean_squared_error')
    modelo.fit(x, y, epochs = 25)
    modelo_json = modelo.to_json()
    with open("modelo.json", "w") as arquivo_json:
        arquivo_json.write(modelo_json)
    modelo.save_weights("modelo.h5")
inicio1 = dt.datetime(2010, 1, 1)
fim1 = dt.datetime.now()
valor = web.DataReader(acao, inicio1, fim1)
precoatual = valor['Close'].values
total = pd.concat((dados['Close'], valor['Close']), axis=0)
modelo_input = total[len(total)-len(valor)-dias:].values
modelo_input = modelo_input.reshape(-1, 1)
modelo_input = scaler.transform(modelo_input)
x1 = []
for a in range(dias, len(modelo_input)):
    x1.append(modelo_input[a-dias:a, 0])
x1 = np.array(x1)
x1 = np.reshape(x1, (x1.shape[0], x1.shape[1], 1))
preco = modelo.predict(x1)
preco = scaler.inverse_transform(preco)
dados_reais = [modelo_input[len(modelo_input)+1-dias:len(modelo_input+1), 0]]
dados_reais = np.array(dados_reais)
dados_reais = np.reshape(dados_reais, (dados_reais.shape[0], dados_reais.shape[1], 1))
previsao = modelo.predict(dados_reais)
previsao = scaler.inverse_transform(previsao)
fig = plt.figure()
plt.plot(precoatual, color="black", label=f"Preço atual da ação: {acao} ")
plt.plot(preco, color="green", label=f"Previsão de preço da ação: {acao}")
plt.title(f"Preços da ação {acao}")
plt.xlabel("Tempo")
plt.ylabel(f"Preços da ação {acao}")
plt.legend()
plt.show()
st.pyplot(fig)
st.write(f"Previsão: {previsao}")
